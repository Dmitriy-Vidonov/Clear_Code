1) Перенос инициализации переменной к блоку кода, где она используется впервые.
Вместо int result = 0;
// блоки кода
result = factorial;
после блоков кода сразу написано int result = factorial;

2) вместо 
int days = 0;
// блоки кода
days++;

прописано int days = 1; // объявление и инициализация переменной в одном месте

3) вместо
int countFull;
countFull = 0;
// блоки кода
внутри цикла: countFull++;

объявление и инициализация переменной countFull непосредственно перед циклом:
int countFull = 0;
далее цикл

4) завершение работы с переменной после работы цикла:
int count = 0;
// работа с переменной внутри цикла
count = -1; // после завершения работы с переменной

5) объявление переменной константой
final int MAP_SQUARE = N * M; // вместо int mapSquare; mapSquare = N * M;

6) перенос объявления переменной
вместо 
int ignFlag;
// блоки кода
изменение ignFlag внутри цикла

производим объявление переменной перед непосредственным использованием:
int ignflag;
// блоки кода с использовнаием ignFlag

7) завершение работы с переменной
после всех блоков кода, использующих переменную ignFlag, равную 1 или 2, используем код: ignFlag = -1;

8) перенос объявления и инициализации переменной iteration непосредственно перед циклом:
вместо 
int iteration;
iteration = 0;
// блоки кода
// изменение iteration внутри цикла

перед циклом использован код:
int iteration = 0;
// далее идет цикл

9) завершение работы с переменной:
после цикла положительная переменная объявлена как отрицательная
int iteration = 0;
// блоки цикла, где происходит увелчение iteration
iteration = -1; // после всех преобразований и использования переменной

10) завершение работы с переменной после использования:
int count;
// блоки кода с использованием переменной, где переменная однозначно больше 0
count = -1; // перевод значения переменной в "недопустимый" диапазон

11) проверка инвариантного значения для переменной, хранящей длину строки
assert len >= 0 : "wrong string length";

12) перенос инициализации переменной:
вместо 
String num1, num2;
num1 = s1; // s1 и s2 - получены исходя из входных значений метода
num2 = s2; 
// блоки кода
использование переменных

сразу объявляем переменные перед непосредственным использованием:
String num1 = s1;
String num2 = s2;

13) проверка инвариантности переменных перед их использованием:
assert len1 >= 0  : "len1 value is less than zero";
assert len2 >= nul0 : "len2 value is less than zero";
где len1 и len2 - переменные со значениями длин массивов

14) завершение работы с переменными:
целочисленная переменная index хранит возможные значения индексов начиная от 0
После всех преобразований данной переменной производим присваивание инвариантного значения:
index = -1;

15) Целочисленное значение процента, с которым производится сравнение - определено как константа
не 50, а final int COMPARISON_PERCENTAGE = 50;























