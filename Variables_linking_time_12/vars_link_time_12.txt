1) Связывание во время компиляции кода:
final int MAP_SQUARE = N * M;
	while (countFull < MAP_SQUARE){
	//блок какого-то кода

Переменная-константа MAP_SQUARE хранит постоянное значение, которое, однако, может различаться при каждом вызове метода, в состав которого
входит MAP_SQUARE. Хранить значение в отдельном конфигурационном файле по данной причине нет никакого смысла.
При этом в коде данная константа может встречаться многократно.

2) Связывание во время написания кода:

int count = 0;
       int countFull = 0;
       for(int i=0; i<L; i++) {
           if(map[battalion[count]-1][battalion[count+1]-1] == 0) {
               map[battalion[count]-1][battalion[count+1]-1] = 1;
               countFull++;
           }
          count+=2;
       } 

Переменные count и countFull хранят изменяющиеся по ходу исполнения алгоритма значения.
Присваивать им значение константы было бы нецелесообразно, как и хранить их значения в стороннем файле.

3) Связывание во время выполнения программы:

public int hash1(String str1)
    {
        long res = 0;
        int rand = getGenerationNumber();
        long len = str1.length();

где метод getGenerationNumber() - метод, получающий число из файла настроек.
Эти числа значительно влияют на работу и эффективность алгоритма, их подбор - это отдельное мероприятие, но тем не менее
зашивать их жестко в константы не стоит. Работа с конфигурационным файлом дает поле для маневров и дальнейшей корректировки значений
без пересбора всей программы.



